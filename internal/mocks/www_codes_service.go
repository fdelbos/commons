// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	context "context"

	auth "github.com/fdelbos/commons/auth"

	mock "github.com/stretchr/testify/mock"
)

// WWWCodesService is an autogenerated mock type for the CodesService type
type WWWCodesService struct {
	mock.Mock
}

// NewCode provides a mock function with given fields: email
func (_m *WWWCodesService) NewCode(email string) (string, *auth.Code) {
	ret := _m.Called(email)

	var r0 string
	var r1 *auth.Code
	if rf, ok := ret.Get(0).(func(string) (string, *auth.Code)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) *auth.Code); ok {
		r1 = rf(email)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*auth.Code)
		}
	}

	return r0, r1
}

// Send provides a mock function with given fields: ctx, to
func (_m *WWWCodesService) Send(ctx context.Context, to string) error {
	ret := _m.Called(ctx, to)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, to)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Validate provides a mock function with given fields: ctx, digits, email
func (_m *WWWCodesService) Validate(ctx context.Context, digits string, email string) error {
	ret := _m.Called(ctx, digits, email)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, digits, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewWWWCodesService creates a new instance of WWWCodesService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWWWCodesService(t interface {
	mock.TestingT
	Cleanup(func())
}) *WWWCodesService {
	mock := &WWWCodesService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
