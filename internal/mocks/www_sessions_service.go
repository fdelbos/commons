// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	context "context"

	auth "github.com/fdelbos/commons/auth"

	mock "github.com/stretchr/testify/mock"

	time "time"

	uuid "github.com/google/uuid"
)

// WWWSessionsService is an autogenerated mock type for the SessionsService type
type WWWSessionsService struct {
	mock.Mock
}

// Close provides a mock function with given fields: ctx, sessionID
func (_m *WWWSessionsService) Close(ctx context.Context, sessionID string) error {
	ret := _m.Called(ctx, sessionID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, sessionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, sessionID
func (_m *WWWSessionsService) Get(ctx context.Context, sessionID string) (*auth.Session, error) {
	ret := _m.Called(ctx, sessionID)

	var r0 *auth.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*auth.Session, error)); ok {
		return rf(ctx, sessionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *auth.Session); ok {
		r0 = rf(ctx, sessionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSession provides a mock function with given fields: ctx, userID, duration
func (_m *WWWSessionsService) NewSession(ctx context.Context, userID uuid.UUID, duration time.Duration) (string, error) {
	ret := _m.Called(ctx, userID, duration)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Duration) (string, error)); ok {
		return rf(ctx, userID, duration)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Duration) string); ok {
		r0 = rf(ctx, userID, duration)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, time.Duration) error); ok {
		r1 = rf(ctx, userID, duration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWWWSessionsService creates a new instance of WWWSessionsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWWWSessionsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *WWWSessionsService {
	mock := &WWWSessionsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
