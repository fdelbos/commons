// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	auth "github.com/fdelbos/commons/auth"
	mock "github.com/stretchr/testify/mock"
)

// AuthSessionsStore is an autogenerated mock type for the SessionsStore type
type AuthSessionsStore struct {
	mock.Mock
}

// Close provides a mock function with given fields: digest
func (_m *AuthSessionsStore) Close(digest []byte) error {
	ret := _m.Called(digest)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(digest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: digest
func (_m *AuthSessionsStore) Get(digest []byte) (*auth.Session, error) {
	ret := _m.Called(digest)

	var r0 *auth.Session
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (*auth.Session, error)); ok {
		return rf(digest)
	}
	if rf, ok := ret.Get(0).(func([]byte) *auth.Session); ok {
		r0 = rf(digest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.Session)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(digest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// New provides a mock function with given fields: session
func (_m *AuthSessionsStore) New(session auth.Session) error {
	ret := _m.Called(session)

	var r0 error
	if rf, ok := ret.Get(0).(func(auth.Session) error); ok {
		r0 = rf(session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAuthSessionsStore creates a new instance of AuthSessionsStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthSessionsStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthSessionsStore {
	mock := &AuthSessionsStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
